package com.example.themoviedbgeekkotlin.repository

import com.example.themoviedbgeekkotlin.model.Actor
import com.example.themoviedbgeekkotlin.model.Movie
import com.example.themoviedbgeekkotlin.storage.MoviesDatabase
import com.example.themoviedbgeekkotlin.storage.enteties.ActorEntity
import com.example.themoviedbgeekkotlin.storage.enteties.MovieEntity
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

interface MoviesRepository {

    /* movies */
    suspend fun getAllMovies(): List<Movie>
    suspend fun getAllMoviesEntity(): List<MovieEntity>
    suspend fun writeMovieIntoDB(movie: Movie, notesMovie: String)
    suspend fun rewriteMoviesListIntoDB(movies: List<Movie>,notesMovie: String)
    /* actors */
    suspend fun getAllActorsByMovie(movieId: Int): List<Actor>
    suspend fun rewriteActorsByMovieIntoDB(actors: List<Actor>, movieId: Int)
}

class MoviesRepositoryImpl : MoviesRepository {

    private val moviesDB = MoviesDatabase.instance

    /** request movies from db */
    override suspend fun getAllMovies(): List<Movie> = withContext(Dispatchers.IO) {
        moviesDB.moviesDao().getAll().map { toMovieDomain(it) }

    }

    /** request movies from db with Notes */
    override suspend fun getAllMoviesEntity(): List<MovieEntity> = withContext(Dispatchers.IO) {
        moviesDB.moviesDao().getAllNotes().map {it}
    }

    /** add movies data into db*/
    override suspend fun writeMovieIntoDB(movie: Movie, notesMovie: String) = withContext(Dispatchers.IO) {
       moviesDB.moviesDao().insert(toMovieEntity(movie, notesMovie))
    }

    /** del movies and write new movies data set again */
    override suspend fun rewriteMoviesListIntoDB(movies: List<Movie>, notesMovie: String) =
        withContext(Dispatchers.IO) {
            moviesDB.moviesDao().deleteAll()
            moviesDB.moviesDao().insertAll(movies.map { toMovieEntity(it, notesMovie) })
        }

    /** request actors by movie id */
    override suspend fun getAllActorsByMovie(movieId: Int): List<Actor> =
        withContext(Dispatchers.IO) {
            moviesDB.actorsDao().getAllByMovieId(movieId).map { toActorDomain(it) }
        }

    /** del actors and write it again. all by movie id */
    override suspend fun rewriteActorsByMovieIntoDB(actors: List<Actor>, movieId: Int) =
        withContext(Dispatchers.IO) {
            moviesDB.actorsDao().deleteByMovieId(movieId)
            moviesDB.actorsDao().insertAll(actors.map { toActorEntity(it, movieId) })
        }


    private fun toActorDomain(actorEntity: ActorEntity) = Actor(
        id = actorEntity.actorId,
        name = actorEntity.name,
        photo_image = actorEntity.image
    )

    private fun toActorEntity(actorDomain: Actor, movieId: Int) = ActorEntity(
        id = null,  // autogenerated primary key
        actorId = actorDomain.id,
        name = actorDomain.name,
        image = actorDomain.photo_image,
        movie = movieId.toLong()
    )

    private fun toMovieDomain(movieEntity: MovieEntity) = Movie(
        id = movieEntity.id.toInt(),
        title = movieEntity.title,
        overview = movieEntity.overview,
        dateRelease = movieEntity.dateRelease,
        poster = movieEntity.poster,
        backdrop = movieEntity.backdrop,
        ratings = movieEntity.ratings,
        adult = movieEntity.adult,
        runtime = movieEntity.runtime,
        reviews = movieEntity.reviews,
        genres = movieEntity.genres.split(",").map { it.trim() },
        like = movieEntity.like

    )

    private fun toMovieEntity(movieDomain: Movie, notesMovie: String) = MovieEntity(
        id = movieDomain.id.toLong(),
        title = movieDomain.title,
        overview = movieDomain.overview,
        dateRelease = movieDomain.dateRelease?:"",
        poster = movieDomain.poster,
        backdrop = movieDomain.backdrop,
        ratings = movieDomain.ratings,
        adult = movieDomain.adult,
        runtime = movieDomain.runtime,
        reviews = movieDomain.reviews,
        genres = movieDomain.genres.joinToString(","),
        like = movieDomain.like,
        notes = notesMovie
    )

    private fun toMovieEntityNotes(movieDomain: MovieEntity) = MovieEntity(
        id = movieDomain.id.toLong(),
        title = movieDomain.title,
        overview = movieDomain.overview,
        dateRelease = movieDomain.dateRelease?:"",
        poster = movieDomain.poster,
        backdrop = movieDomain.backdrop,
        ratings = movieDomain.ratings,
        adult = movieDomain.adult,
        runtime = movieDomain.runtime,
        reviews = movieDomain.reviews,
        genres = movieDomain.genres,
        like = movieDomain.like,
        notes = movieDomain.notes
    )

}
//        val id: Int,
//        val title: String,
//        val overview: String?,
//        val dateRelease: String,
//        val poster: String,
//        val backdrop: String,
//        val ratings: Float,
//        val adult: Boolean,
//        val runtime: Int?,
//        val reviews: Int,
//        val genres: List<String>,
//        val like: Boolean = false